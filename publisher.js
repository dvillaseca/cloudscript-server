require('colors');
const playfab = require('playfab-sdk');
const releaseCompiler = require('./src/compilers/releaseCompiler.js');
function UpdateCloudscript(args) {
    return new Promise((resolve, reject) => {
        playfab.PlayFabAdmin.UpdateCloudScript(args, (err, res) => {
            if (err)
                return reject(err);
            resolve(res.data);
        });
    })
}
module.exports = async (directory) => {
    require('dotenv').config({ path: require('path').join(directory, './.env') });
    playfab.settings.titleId = process.env['TITLE_ID'];
    playfab.settings.developerSecretKey = process.env['TITLE_SECRET'];
    console.log("‚öôÔ∏è Compiling...".blue);
    let minified = releaseCompiler.compile(directory);

    try {
        let commitComment = ``;
        if (process.env['GIT_COMMIT_HASH'] != null)
            commitComment = `Commit hash ${process.env['GIT_COMMIT_HASH']}`;
        if (process.env['GIT_BRANCH'] != null)
            commitComment += `\nBranch ${process.env['GIT_BRANCH']}`;
        if (commitComment.length != 0) commitComment = `\n${commitComment}\n`

        let startComment = `/*\nThis file is generated by the publisher.js script ${commitComment}*/\n`

        minified = startComment + minified;
    }
    catch (e) {
        console.error(e);
    }
    console.log("üì§ Publishing...".blue);
    let response = await UpdateCloudscript({
        Files: [{
            FileContents: minified,
            FileName: 'cloudscript.min.js'
        }]
    });
    console.log(`‚úÖ Published revision: ${response.Revision}`.green);
}